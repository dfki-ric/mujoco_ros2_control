import os

from ament_index_python import get_package_share_directory

from launch import LaunchDescription
import launch_ros
from launch.actions import ExecuteProcess, RegisterEventHandler, LogInfo
from launch.actions import IncludeLaunchDescription
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch_ros.actions import Node
from launch_ros.substitutions import FindPackageShare
from launch.event_handlers import (OnExecutionComplete, OnProcessExit,
                                   OnProcessIO, OnProcessStart, OnShutdown)

import xacro
import yaml


def load_file(package_name, file_path):
    package_path = get_package_share_directory(package_name)
    absolute_file_path = os.path.join(package_path, file_path)
    try:
        with open(absolute_file_path, 'r') as file:
            return file.read()
    except EnvironmentError:
        # parent of IOError, OSError *and* WindowsError where available.
        return None


# LOAD YAML:
def load_yaml(package_name, file_path):
    package_path = get_package_share_directory(package_name)
    absolute_file_path = os.path.join(package_path, file_path)
    try:
        with open(absolute_file_path, 'r') as file:
            return yaml.safe_load(file)
    except EnvironmentError:
        # parent of IOError, OSError *and* WindowsError where available.
        return None


def generate_launch_description():
    namespace = ''
    command_interface = 'effort'

    robot_description_path = os.path.join(
        get_package_share_directory('panda_simulation'),
        'urdf',
        'panda.urdf.xacro')

    robot_description_string = xacro.process_file(robot_description_path, mappings={
        'ros2_control_command_interface': command_interface,
        'name': 'panda',
        'origin_xyz': '0.5 0 0.875',
        'origin_rpy': '0 0 0',
        'world_name': 'base_link',
        'generate_world_frame': 'false',
        'ros2_control_plugin': 'mujoco_ros2_control/MujocoSystem'
    }).toxml()

    robot_description = {'robot_description': robot_description_string}

    mujoco_model_path = "/tmp/mujoco"
    mujoco_model_file = mujoco_model_path + "/panda.xml"

    mujoco_scene_file = os.path.join(
        get_package_share_directory('panda_simulation'),
        'mjcf',
        'panda_scene.xml')

    # Add a free joint
    usb_female_file = os.path.join(
        get_package_share_directory('franka_description'),
        'robots',
        'USB_Female.urdf.xacro')

    usb_male_file = os.path.join(
        get_package_share_directory('franka_description'),
        'robots',
        'USB_Male.urdf.xacro')

    xacro2mjcf = Node(
        package="mujoco_ros2_control",
        executable="xacro2mjcf.py",
        parameters=[{'robot_descriptions': [robot_description_string]},
                    # robot descriptions of ros robots (it is possible to load multiple robot descriptions, but ros use only one at time
                    {'input_files': [  # Paths to all files that must be included, like free joints or scene files
                        mujoco_scene_file,
                        #usb_female_file,
                        #usb_male_file
                        #mujoco_table_file
                    ]},
                    {'output_file': mujoco_model_file},  # Path to the output file
                    {'mujoco_files_path': mujoco_model_path}]
        # Path to the output folder (the output file must be in this folder)
    )

    robot_state_publisher = Node(
        package="robot_state_publisher",
        executable="robot_state_publisher",
        name="robot_state_publisher",
        namespace=namespace,
        parameters=[robot_description]
    )

    # ros2_control_params_file = os.path.join(
    #     get_package_share_directory('franka_description'),
    #     'config',
    #     'controllers.yaml'
    # )

    ros2_control_params_file = os.path.join(
        get_package_share_directory('panda_moveit2'),
        'config',
        'ros2_controllers.yaml'
    )

    mujoco = Node(
        package="mujoco_ros2_control",
        executable="mujoco_ros2_control",
        namespace=namespace,
        respawn=True,
        parameters=[
            robot_description,
            ros2_control_params_file,
            {"simulation_frequency": 1000.0},  # Hz
            {"realtime_factor": 1.0},  # 1.0 is realtime
            {"robot_model_path": mujoco_model_file},  # Path to the mujoco model file, that was generated by xacro2mjcf
            {"show_gui": True},  # Enable or disable the mujoco GUI
            {"clock_publisher_frequency": 0.0}]
        # If 0 the clock is published with sumulation frequency, otherwise it is in Hz
    )

    start_mujoco = RegisterEventHandler(
        OnExecutionComplete(
            target_action=xacro2mjcf,
            on_completion=[
                LogInfo(msg='Created mujoco xml'),
                mujoco
            ]
        )
    )

    load_joint_state_controller = ExecuteProcess(
        cmd=['ros2', 'control', 'load_controller', '--set-state', 'active',
             'joint_state_broadcaster'],
        output='screen'
    )

    load_arm_controller = ExecuteProcess(
        cmd=['ros2', 'control', 'load_controller', '--set-state', 'active',
             'cartesian_impedance_controller'],
        output='screen'
    )

    load_gripper_controller = ExecuteProcess(
        cmd=['ros2', 'control', 'load_controller', '--set-state', 'active',
             'hand_controller'],
        output='screen'
    )


    # *** PLANNING CONTEXT *** #
    # Robot description, SRDF:
    robot_description_semantic_config = load_file("panda_moveit2", "config/panda.srdf")
    robot_description_semantic = {"robot_description_semantic": robot_description_semantic_config }

    # Kinematics.yaml file:
    kinematics_yaml = load_yaml("panda_moveit2", "config/kinematics.yaml")
    robot_description_kinematics = {"robot_description_kinematics": kinematics_yaml}

    # Move group: OMPL Planning.
    ompl_planning_pipeline_config = {
        "move_group": {
            "planning_plugin": "ompl_interface/OMPLPlanner",
            "request_adapters": """default_planner_request_adapters/AddTimeOptimalParameterization default_planner_request_adapters/FixWorkspaceBounds default_planner_request_adapters/FixStartStateBounds default_planner_request_adapters/FixStartStateCollision default_planner_request_adapters/FixStartStatePathConstraints""",
            "start_state_max_bounds_error": 0.1,
        }
    }
    ompl_planning_yaml = load_yaml("panda_moveit2", "config/ompl_planning.yaml")
    ompl_planning_pipeline_config["move_group"].update(ompl_planning_yaml)

    # MoveIt!2 Controllers:
    moveit_simple_controllers_yaml = load_yaml("panda_moveit2", "config/moveit_controllers.yaml")
    moveit_controllers = {
        "moveit_simple_controller_manager": moveit_simple_controllers_yaml,
        "moveit_controller_manager": "moveit_simple_controller_manager/MoveItSimpleControllerManager",
    }
    trajectory_execution = {
        "moveit_manage_controllers": True,
        "trajectory_execution.allowed_execution_duration_scaling": 1.2,
        "trajectory_execution.allowed_goal_duration_margin": 0.5,
        "trajectory_execution.allowed_start_tolerance": 0.01,
    }
    planning_scene_monitor_parameters = {
        "publish_planning_scene": True,
        "publish_geometry_updates": True,
        "publish_state_updates": True,
        "publish_transforms_updates": True,
    }

    print(moveit_controllers)

    # START NODE -> MOVE GROUP:
    run_move_group_node = Node(
        package="moveit_ros_move_group",
        executable="move_group",
        output="screen",
        parameters=[
            robot_description,
            robot_description_semantic,
            robot_description_kinematics,
            ompl_planning_pipeline_config,
            trajectory_execution,
            moveit_simple_controllers_yaml,
            planning_scene_monitor_parameters,
            {"use_sim_time": True}
        ],
    )

    # RVIZ:
    rviz_base = os.path.join(get_package_share_directory("panda_moveit2"), "config")
    rviz_full_config = os.path.join(rviz_base, "moveit.rviz")
    rviz_node_full = Node(
        package="rviz2",
        executable="rviz2",
        name="rviz2",
        output="log",
        arguments=["-d", rviz_full_config],
        parameters=[
            robot_description,
            robot_description_semantic,
            ompl_planning_pipeline_config,
            kinematics_yaml,
            {"use_sim_time": True},
        ],
    )

    register_controllers = RegisterEventHandler(
        OnProcessStart(
            target_action=mujoco,
            on_start=[
                LogInfo(msg='MuJoCo started, spawning robot'),
                load_joint_state_controller,
                load_arm_controller,
                load_gripper_controller,
                run_move_group_node,
                rviz_node_full
            ]
        )
    )

    return LaunchDescription(
        [
            start_mujoco,
            register_controllers,
            xacro2mjcf,
            robot_state_publisher
        ]
    )